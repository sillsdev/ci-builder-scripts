#!/bin/bash
# Create binary package
# set supported distros and architectures
set -e

PROGRAM_NAME="$(basename "$0")"

. $(dirname "$0")/common.sh
init "$@"

# Don't try to process 32-bit package products if they are all architectureless.
grep "^Architecture: " "$debian_path"/control|grep -q -v "Architecture: all$" || {
    stderr "All binary packages are listed as 'all' architecture. Resetting --arches to 'amd64'."
    ARCHES_TO_PACKAGE="amd64"
}

stderr "Removing old packages"

for dist in $DISTRIBUTIONS_TO_PACKAGE; do
	for arch in $ARCHES_TO_PACKAGE; do
		rm $pbuilder_path/$dist/$arch/result/${source_package_name}_*.changes || true
		rm $pbuilder_path/$dist/$arch/result/${source_package_name}_*.deb || true
		rm $WORKSPACE/results/* || true
	done
done

stderr "Preparing for building binary package(s)"

mkdir -p "$pbuilder_path"

[ -f "${pbuilder_path}/sil-testing.gpg" ] || wget -q -O "${pbuilder_path}/sil-testing.gpg" http://linux.lsdev.sil.org/downloads/sil-testing.gpg
[ -f "${pbuilder_path}/sil.gpg" ] || wget -q -O "${pbuilder_path}/sil.gpg" http://packages.sil.org/sil.gpg

[ -f "$HOME/.pbuilderrc" ] || cp $PBUILDER_TOOLS_PATH/pbuilderrc $HOME/.pbuilderrc

# Make sure base.tgz is in place for any distributions being used.
for distribution in $DISTRIBUTIONS_TO_PACKAGE; do
    for arch in $ARCHES_TO_PACKAGE; do
        if [ ! -e "$pbuilder_path"/$distribution/$arch/base.tgz ]; then
            PBUILDERDIR="$pbuilder_path" DISTRIBUTIONS="$distribution" ARCHES="$arch" \
				$PBUILDER_TOOLS_PATH/setup.sh
        fi
    done
done

stderr "Building binary package(s)"

cd "$repo_base_dir"
packagedsc="${source_package_name}_*.dsc"
sudo HOME=~ PBUILDERDIR="$pbuilder_path" HOOKDIR="$PBUILDER_TOOLS_PATH/hooks" http_proxy="$http_proxy" no_proxy="$no_proxy" DISTRIBUTIONS="$DISTRIBUTIONS_TO_PACKAGE" ARCHES="$ARCHES_TO_PACKAGE" FULL_BUILD_NUMBER="$FULL_BUILD_NUMBER" $PBUILDER_TOOLS_PATH/build-multi.sh "$packagedsc"

stderr "Signing package(s)"

cd "$pbuilder_path"
for dist in $DISTRIBUTIONS_TO_PACKAGE; do
	for arch in $ARCHES_TO_PACKAGE; do
		cd $pbuilder_path/$dist/$arch/result
		if [ $(ls ${source_package_name}_*.changes 2> /dev/null | wc -l) -ge 1 ]; then
			sed -i '10d' ${source_package_name}_*.changes
			# .changes files can have their Distribution set to UNRELEASED sometimes. Fix it.
			perl -pi -e "s/UNRELEASED/$dist/" ${source_package_name}_*.changes
			[ -z "$debkeyid" ] && stderr "Warning: debkeyid not set."
			debsign -k$debkeyid --no-re-sign ${source_package_name}_*.changes
		fi
	done
done

stderr "Binary package files exist with the following sha256sums:"
for dist in $DISTRIBUTIONS_TO_PACKAGE; do
    for arch in $ARCHES_TO_PACKAGE; do
        cd $pbuilder_path/$dist/$arch/result
        sha256sum ${source_package_name}_*.changes ${source_package_name}_*.deb || true
        if [ -n "$preserve_products_arg" ]; then
            mkdir -p "$PRODUCTS_PRESERVATION_PATH"
            cp -a ${source_package_name}_*.changes ${source_package_name}_*.deb "$PRODUCTS_PRESERVATION_PATH"/
        fi
		mkdir -p "$WORKSPACE/results"
        cp -a ${source_package_name}_*.changes ${source_package_name}_*.deb $WORKSPACE/results/
    done
done

stderr "Results:"
any_failures=false
for dist in $DISTRIBUTIONS_TO_PACKAGE; do
    for arch in $ARCHES_TO_PACKAGE; do
        RESULT="$pbuilder_path/$dist/$arch/result/${source_package_name}_*.status"
        echo $RESULT:
        cat $RESULT
        grep -q '^0$' $RESULT || any_failures=true
    done
done

if [ "$any_failures" = "true" ]; then
    stderr "One or more failures detected. Not uploading any packages."
    exit 100
fi

if [ "$destination_repository_arg" = "pso-main" -o "$destination_repository_arg" = "pso-experimental" ]; then
	# we don't want automatic uploads to pso
	exit 0
fi

stderr "Upload binary packages"
cd "$pbuilder_path"
for dist in $DISTRIBUTIONS_TO_PACKAGE; do
	for arch in $ARCHES_TO_PACKAGE; do
		cd $pbuilder_path/$dist/$arch/result
		if [ $(ls ${source_package_name}_*.changes 2> /dev/null | wc -l) -ge 1 ]; then
			destination_repository="ubuntu/$dist-$SUITE_NAME"
			if [ "$destination_repository_arg" = "llso-main" ]; then
				destination_repository="ubuntu/$dist"
			fi
			dput $dput_simulate -U llso:$destination_repository ${source_package_name}_*.changes
		fi
	done
done

stderr "Upload source package"
cd "$repo_base_dir"
for dist in $DISTRIBUTIONS_TO_PACKAGE; do
	destination_repository="ubuntu/$dist-$SUITE_NAME"
	if [ "$destination_repository_arg" = "llso-main" ]; then
		destination_repository="ubuntu/$dist"
	fi
	dput $dput_simulate -U llso:$destination_repository ${source_package_name}_*source.changes
	# uploading once is sufficient, so we break here
	break
done

exit 0
