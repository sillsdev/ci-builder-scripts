#!/bin/bash
# Create binary package
# set supported distros and architectures
set -e

PROGRAM_NAME="$(basename "$0")"
PROGRAM_DIR=$(readlink -f $(dirname "$0"))

function helpScript() {
	cat << EOF

$PROGRAM_NAME --dists <distros> --arches <arches> [--debkeyid <keyid>]
		[--build-in-place] [--no-upload]

Create binary packages.

Arguments:
	--dists <distros> - the distributions to build packages for
	--arches <arches> - the architectures to build packages for
	--debkeyid <keyid> - the GPG key to use to sign the package (instead of
		trying to use Jenkins' GPG key)
	--build-in-place - use the current directory as build directory instead
		of \$repo_base_dir/\$source_package_name
	--no-upload - Don't upload the binary packages to llso

There are more optional parameters that can be set. See common.sh.

NOTE: This help is incomplete. Please add the description of more options
that are useful and apply to this script.
EOF
	exit 0
}

. $PROGRAM_DIR/common.sh
init "$@"
[ -f $PROGRAM_DIR/build-package.config ] && . $PROGRAM_DIR/build-package.config

ARTIFACTSDIR=${WORKSPACE:-$repo_base_dir}/results

# Don't try to process 32-bit package products if they are all architectureless.
grep "^Architecture: " "$debian_path"/control|grep -q -v "Architecture: all$" || {
	if [[ $ARCHES_TO_PACKAGE == *"amd64"* ]]; then
		log "All binary packages are listed as 'all' architecture. Resetting --arches to 'amd64'."
		ARCHES_TO_PACKAGE="amd64"
	else
		log "All binary packages are listed as 'all' architecture. Not building i386."
		exit 50
	fi
}

log "Removing old packages"

for dist in $DISTRIBUTIONS_TO_PACKAGE; do
	for arch in $ARCHES_TO_PACKAGE; do
		RESULT="$RESULTBASE/$dist-$arch/result"
		rm $RESULT/${source_package_name}_*.{changes,deb,dsc,status,tar.*} 2>/dev/null || true
		rm ${ARTIFACTSDIR}/* 2>/dev/null || true
	done
done

log "Preparing for building binary package(s) for ${DISTRIBUTIONS_TO_PACKAGE}"

mkdir -p "$RESULTBASE"

[ -f "${RESULTBASE}/sil-testing.gpg" ] || wget -q -O "${RESULTBASE}/sil-testing.gpg" http://linux.lsdev.sil.org/downloads/sil-testing.gpg
[ -f "${RESULTBASE}/sil.gpg" ] || wget -q -O "${RESULTBASE}/sil.gpg" http://packages.sil.org/sil.gpg

# Make sure chroot is in place for any distributions being used.
for distribution in $DISTRIBUTIONS_TO_PACKAGE; do
	for arch in $ARCHES_TO_PACKAGE; do
		if [ ! -e "$SCHROOTDIR"/$distribution-$arch ]; then
			log "$SCHROOTDIR/$distribution-$arch does not exist. Creating a new chroot for $distribution-$arch"
			$PROGRAM_DIR/setup.sh --dists "$distribution" --arches "$arch"
		fi
	done
done

log "Building binary package(s)"

cd "$repo_base_dir"
packagedsc=$(ls ${source_package_name}_*.dsc)
DISTRIBUTIONS="$DISTRIBUTIONS_TO_PACKAGE" ARCHES="$ARCHES_TO_PACKAGE" $PROGRAM_DIR/build-multi.sh "$packagedsc"

function UpdateChangesFile() {
	# $1 name of the .changes file
	# $2 name of distribution to replace UNRELEASED

	# REVIEW: What is line 10?
	# ENHANCE: Explicitly search for the field name and delete the line
	sed -i '10d' $1
	# .changes files can have their Distribution set to UNRELEASED sometimes. Fix it.
	perl -pi -e "s/UNRELEASED/$2/" $1
}

if [ -n "$debkeyid" ]; then
	# Source package
	cd "$repo_base_dir"
	if [ $(ls ${source_package_name}_*source.changes 2> /dev/null | wc -l) -ge 1 ]; then
		log "Signing source package"
		UpdateChangesFile ${source_package_name}_*source.changes ${DISTRIBUTIONS_TO_PACKAGE#* }
		debsign -k$debkeyid -S --re-sign ${source_package_name}_*source.changes
	fi

	log "Signing package(s)"
	cd "$RESULTBASE"
	for dist in $DISTRIBUTIONS_TO_PACKAGE; do
		for arch in $ARCHES_TO_PACKAGE; do
			RESULT="$RESULTBASE/$dist-$arch/result"
			mkdir -p $RESULT
			cd $RESULT
			if [ $(ls ${source_package_name}_*.changes 2> /dev/null | wc -l) -ge 1 ]; then
				UpdateChangesFile ${source_package_name}_*.changes $dist
				debsign -k$debkeyid --no-re-sign ${source_package_name}_*.changes
			fi
		done
	done
else
	log "Skip signing package(s)"
	stderr "Warning: debkeyid not set."
fi

log "Package files exist with the following sha256sums:"
# Source package
cd "$repo_base_dir"
mkdir -p "$ARTIFACTSDIR"
if [ $(ls ${source_package_name}_*-1*.dsc 2> /dev/null | wc -l) -ge 1 ]; then
	if grep -q '.buildinfo$' ${source_package_name}_*-1*.dsc ; then
		# Starting with Bionic the package contains a .buildinfo file that's required to
		# upload the package
		DCMD_ARGS="--orig --debtar --buildinfo"
	else
		DCMD_ARGS="--orig --debtar"
	fi
	dcmd --dsc $DCMD_ARGS sha256sum ${source_package_name}_*-1*.dsc || true
	dcmd --dsc $DCMD_ARGS cp ${source_package_name}_*-1*.dsc $ARTIFACTSDIR/
	cp ${source_package_name}_*source.changes $ARTIFACTSDIR
fi
# Binary packages
for dist in $DISTRIBUTIONS_TO_PACKAGE; do
	for arch in $ARCHES_TO_PACKAGE; do
		cd $RESULTBASE/$dist-$arch/result
		if grep -q '.buildinfo$' ${source_package_name}_*+${dist}1_${arch}.changes ; then
			# Starting with Bionic the package contains a .buildinfo file that's required to
			# upload the package
			DCMD_ARGS="--deb --changes --buildinfo"
			DCMD_NOARGS="--no-deb --no-changes --no-orig --no-debtar --no-dsc --no-buildinfo"
		else
			DCMD_ARGS="--deb --changes"
			DCMD_NOARGS="--no-deb --no-changes --no-orig --no-debtar --no-dsc"
		fi
		TRACE dcmd $DCMD_ARGS sha256sum ${source_package_name}_*+${dist}1_${arch}.changes || true
		dcmd $DCMD_ARGS cp ${source_package_name}_*+${dist}1_${arch}.changes $ARTIFACTSDIR/
		if grep -q '.ddeb$' ${source_package_name}_*+${dist}1_${arch}.changes ; then
			dcmd $DCMD_NOARGS sha256sum ${source_package_name}_*+${dist}1_${arch}.changes || true
			dcmd $DCMD_NOARGS cp ${source_package_name}_*+${dist}1_${arch}.changes $ARTIFACTSDIR/
		fi
		if [ $( ls ${source_package_name}_*-1+*.dsc 2> /dev/null | wc -l) -ge 1 ]; then
			dcmd --dsc --orig --debtar sha256sum ${source_package_name}_*-1+*.dsc || true
			dcmd --dsc --orig --debtar cp ${source_package_name}_*-1+*.dsc $ARTIFACTSDIR/
		fi
	done
done

log "Results:"
any_failures=false
for dist in $DISTRIBUTIONS_TO_PACKAGE; do
	for arch in $ARCHES_TO_PACKAGE; do
		RESULT="$RESULTBASE/$dist-$arch/result/${source_package_name}_*.status"
		echo -n "$(eval echo $(basename $RESULT)): "
		cat $RESULT
		grep -q '^0$' $RESULT || any_failures=true
	done
done

if [ "$any_failures" = "true" ]; then
	stderr "Error: One or more failures detected. Not uploading any packages."
	exit 100
fi

if [ -n "$no_upload" ]; then
	# don't automatically upload
	exit 0
fi

log "Upload packages"
# Upload source package
cd "$ARTIFACTSDIR"
if [ $(ls ${source_package_name}_*source.changes 2> /dev/null | wc -l) -ge 1 ]; then
	dist=${DISTRIBUTIONS_TO_PACKAGE#* }
	log "Uploading source package to llso:ubuntu/$dist$SUITE_NAME"
	dput $dput_simulate -U llso:ubuntu/$dist$SUITE_NAME ${source_package_name}_*source.changes
fi
# Upload binary packages
cd "$RESULTBASE"
for dist in $DISTRIBUTIONS_TO_PACKAGE; do
	for arch in $ARCHES_TO_PACKAGE; do
		cd $RESULTBASE/$dist-$arch/result
		if [ $(ls ${source_package_name}_*.changes 2> /dev/null | wc -l) -ge 1 ]; then
			log "Uploading to llso:ubuntu/$dist$SUITE_NAME $arch"
			dput $dput_simulate -U llso:ubuntu/$dist$SUITE_NAME ${source_package_name}_*.changes
		fi
	done
done

exit 0
